image:
  name: hashicorp/terraform:0.12.21
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

stages:
  # Run unit tests and linting on code.
  - Test and Lint
  # Build Docker image and push to ECR
  - Build and Push
  # Output the plan of what changes are going to be made to the infrastructure
  - Staging Plan
  # Apply changes to structure
  - Staging Apply
  - Production Plan
  - Production Apply
  # Manual jobs to destroy environment
  - Destroy

Test and Lint:
  image: docker:19.03.5
  services:
    # dind - docker in docker: running docker image inside docker container
    - docker:19.03.5-dind
  stage: Test and Lint
  script:
    # dependencies
    - apk add --update docker-compose
    # sh -> shell command
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test && flake8"
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

Validate Terraform:
  stage: Test and Lint
  script:
    - cd deploy/
    # cloning the terraform provider
    - terraform init -backend=false
    - terraform validate
    # auto format terraform code
    - terraform fmt -check
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

Build and Push:
  stage: Build and Push
  script:
    - echo "Build and Push docker image"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Staging Plan:
  stage: Staging Plan
  script:
    - echo "Run Terraform Plan for Staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Staging Apply:
  stage: Staging Apply
  script:
    - echo "Run Terraform Apply for Staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Production Plan:
  stage: Production Plan
  script:
    - echo "Run Terraform Plan for Production"
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply:
  stage: Production Apply
  script:
    - echo "Run Terraform Apply for Production"
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual

Staging Destroy:
  stage: Destroy
  script:
    - echo "Run Terraform Destroy for Staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'
      when: manual

Production Destroy:
  stage: Destroy
  script:
    - echo "Run Terraform Destroy for Production"
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual
