image:
  # update terraform due to outdated GPG key
  name: hashicorp/terraform:0.12.31
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

stages:
  # Run unit tests and linting on code.
  - Test and Lint
  # Build Docker image and push to ECR
  - Build and Push
  # Output the plan of what changes are going to be made to the infrastructure
  - Staging Plan
  # Apply changes to structure
  - Staging Apply
  - Production Plan
  - Production Apply
  # Manual jobs to destroy environment
  - Destroy

Test and Lint:
  image: docker:19.03.5
  services:
    # dind - docker in docker: running docker image inside docker container
    - docker:19.03.5-dind
  stage: Test and Lint
  script:
    # dependencies
    - apk add --update docker-compose
    # sh -> shell command
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test && flake8"
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

Validate Terraform:
  stage: Test and Lint
  script:
    - cd deploy/
    # cloning the terraform provider
    - terraform init -backend=false
    - terraform validate
    # auto format terraform code
    - terraform fmt -check
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

Build and Push:
  image: docker:19.03.5
  services:
    # dind - docker in docker: running docker image inside docker container
    - docker:19.03.5-dind
  stage: Build and Push
  script:
    # Add python3 to Docker image
    - apk add python3
    # Install aws cli tool
    - pip3 install awscli
    # Build Docker image, ECR_REPO as set in GitLab
    # $CI_COMMIT_SHORT_SHA . -> unique tag associated with the image that is pushed to ECR
    # Build the Docker image in the root of repo that we are currently in
    - docker build --compress -t $ECR_REPO:$CI_COMMIT_SHORT_SHA .
    # Execute Docker login command
    - $(aws ecr get-login --no-include-email --region us-east-1)
    # Push the image to ECR registry
    - docker push $ECR_REPO:$CI_COMMIT_SHORT_SHA
    # Latest tag always has the latest ver. of app
    - docker tag $ECR_REPO:$CI_COMMIT_SHORT_SHA $ECR_REPO:latest
    # Push the latest tag
    - docker push $ECR_REPO:latest

  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Staging Plan:
  stage: Staging Plan
  script:
    - cd deploy/
    # same as the tag in Build and Push
    # TF_VAR -> syntax used to pass env var into Terraform
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    # Pull down providers that are needed
    - terraform force-unlock 882663dc-e948-2ece-5b32-b983cda742b4
    - terraform init
    # select correct workspace to deploy
    - terraform workspace select staging || terraform workspace new staging
    # output the console logs all the changes that will be made to AWS
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

# Run immediately after plan -> deploy frequently
Staging Apply:
  stage: Staging Apply
  script:
    - cd deploy/
    # define the ECR image API with commit message
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    # initialize terraform
    - terraform init
    # select workspace
    - terraform workspace select staging
    # automatically approve
    - terraform apply -auto-approve

  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'

Production Plan:
  stage: Production Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select production || terraform workspace new production
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply:
  stage: Production Apply
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select production
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual

Staging Destroy:
  stage: Destroy
  script:
    - cd deploy/
    - terraform init
    - terraform workspace select staging
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'
      when: manual

Production Destroy:
  stage: Destroy
  script:
    - cd deploy/
    - terraform init
    - terraform workspace select production
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual
